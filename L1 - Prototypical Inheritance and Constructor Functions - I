function Car(make, model, year, type) {
  this.make = make;
  this.model = model;
  this.year = year;
  this.type = type; 
  this.isAvailable = true;
}

function Customer(name) {
  this.name = name;
  this.rentedCars = [];
}

Customer.prototype.rentCar = function(car) {
  if (car.isAvailable) {
    car.isAvailable = false;
    this.rentedCars.push(car);
    console.log(`${this.name} rented a ${car.make} ${car.model}.`);
  } else {
    console.log(`Sorry, ${car.make} ${car.model} is already rented.`);
  }
};

Customer.prototype.returnCar = function(car) {
  setTimeout(() => {
    car.isAvailable = true;
    this.rentedCars = this.rentedCars.filter(c => c !== car);
    console.log(`${this.name} returned the ${car.make} ${car.model}.`);
  }, 2000); 
};

function PremiumCustomer(name, discountRate) {
  Customer.call(this, name); 
  this.discountRate = discountRate;
}

PremiumCustomer.prototype = Object.create(Customer.prototype);
PremiumCustomer.prototype.constructor = PremiumCustomer;

function calculateRentalPrice(car, days, customer) {
  let baseRate = 50;
  let typeRate = car.type === "SUV" ? 1.5 : 1;
  let discount = customer instanceof PremiumCustomer ? customer.discountRate : 0;

  let totalPrice = baseRate * typeRate * days;
  let finalPrice = totalPrice - totalPrice * (discount / 100);

  console.log(`${customer.name} has to pay $${finalPrice.toFixed(2)} for renting the ${car.make} ${car.model} for ${days} days.`);
}

function Maintenance(car, delay) {
  console.log(`${car.make} ${car.model} is under maintenance.`);
  setTimeout(() => {
    car.isAvailable = true;
    console.log(`${car.make} ${car.model} is now available after maintenance.`);
  }, delay);
}

const car1 = new Car("Toyota", "Corolla", 2022, "Sedan");
const car2 = new Car("Ford", "Explorer", 2023, "SUV");
const car3 = new Car("Honda", "Civic", 2021, "Sedan");

const customer1 = new Customer("Alice");
const premiumCustomer1 = new PremiumCustomer("Bob", 10);

customer1.rentCar(car1);
premiumCustomer1.rentCar(car2);

calculateRentalPrice(car1, 3, customer1);
calculateRentalPrice(car2, 5, premiumCustomer1);

customer1.returnCar(car1);
Maintenance(car3, 3000);
